# frozen_string_literal: true

require "spec_helper"

describe TimexDatalinkClient::Protocol7::Eeprom::Phrase do
  let(:phrase) { [0xb1] }
  let(:phrase_instance) { described_class.new(phrase: phrase) }

  describe ".packets" do
    let(:phrases) { [phrase_instance] }

    subject(:packets) { described_class.packets(phrases) }

    it do
      should eq [
        0x0c, 0x00, 0x1a, 0x00, 0x1c, 0x00, 0x26, 0x00, 0x30, 0x00, 0x3a, 0x00, 0x49, 0x00, 0x58, 0x00, 0x62, 0x00,
        0x6c, 0x00, 0x71, 0x00, 0x7b, 0x00, 0x85, 0x00, 0x8f, 0x00, 0xf0, 0x53, 0xfd, 0x4d, 0x03, 0xb0, 0x8d, 0xfe,
        0x00, 0x00, 0xf0, 0x53, 0xfd, 0x4d, 0x03, 0xb0, 0x7b, 0xfe, 0x00, 0x00, 0xf0, 0xfb, 0x63, 0x39, 0x3c, 0xc0,
        0xfe, 0x00, 0x00, 0x00, 0xf0, 0xfb, 0x61, 0x39, 0x3c, 0x70, 0x94, 0xfd, 0x4b, 0x03, 0x7c, 0x44, 0x27, 0xfe,
        0x00, 0xd3, 0xfb, 0xae, 0x30, 0x29, 0x33, 0x3c, 0xfb, 0x30, 0x20, 0x07, 0x3c, 0x39, 0x24, 0xfe, 0xf1, 0xfb,
        0x53, 0x03, 0xae, 0x9c, 0xe6, 0x8e, 0xfe, 0x00, 0xc1, 0x61, 0x39, 0x3c, 0x44, 0xcc, 0xfd, 0x4b, 0xfe, 0x00,
        0xff, 0xfb, 0x61, 0x3e, 0xfe, 0x41, 0xcb, 0x39, 0x3c, 0x44, 0xcc, 0xfd, 0x4b, 0xfe, 0x00, 0x37, 0x39, 0x5a,
        0xae, 0xfd, 0x1f, 0x4b, 0x8e, 0x81, 0xfe, 0x3f, 0x39, 0x5a, 0x1c, 0x81, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x30,
        0xb1, 0xff, 0x00, 0x00, 0x05
      ]
    end

    context "with no phrases" do
      let(:phrases) { [] }

      it do
        should eq [
          0x0b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x24, 0x00, 0x2e, 0x00, 0x38, 0x00, 0x47, 0x00, 0x56, 0x00, 0x60, 0x00,
          0x6a, 0x00, 0x6f, 0x00, 0x79, 0x00, 0x83, 0x00, 0xf0, 0x53, 0xfd, 0x4d, 0x03, 0xb0, 0x8d, 0xfe, 0x00, 0x00,
          0xf0, 0x53, 0xfd, 0x4d, 0x03, 0xb0, 0x7b, 0xfe, 0x00, 0x00, 0xf0, 0xfb, 0x63, 0x39, 0x3c, 0xc0, 0xfe, 0x00,
          0x00, 0x00, 0xf0, 0xfb, 0x61, 0x39, 0x3c, 0x70, 0x94, 0xfd, 0x4b, 0x03, 0x7c, 0x44, 0x27, 0xfe, 0x00, 0xd3,
          0xfb, 0xae, 0x30, 0x29, 0x33, 0x3c, 0xfb, 0x30, 0x20, 0x07, 0x3c, 0x39, 0x24, 0xfe, 0xf1, 0xfb, 0x53, 0x03,
          0xae, 0x9c, 0xe6, 0x8e, 0xfe, 0x00, 0xc1, 0x61, 0x39, 0x3c, 0x44, 0xcc, 0xfd, 0x4b, 0xfe, 0x00, 0xff, 0xfb,
          0x61, 0x3e, 0xfe, 0x41, 0xcb, 0x39, 0x3c, 0x44, 0xcc, 0xfd, 0x4b, 0xfe, 0x00, 0x37, 0x39, 0x5a, 0xae, 0xfd,
          0x1f, 0x4b, 0x8e, 0x81, 0xfe, 0x3f, 0x39, 0x5a, 0x1c, 0x81, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x05
        ]
      end
    end

    context "with two phrases" do
      let(:phrase_instance_2) { described_class.new(phrase: [0xb1, 0xb2, 0xb3]) }

      let(:phrases) { [phrase_instance, phrase_instance_2] }

      it do
        should eq [
          0x0d, 0x00, 0x1a, 0x00, 0x1e, 0x00, 0x28, 0x00, 0x32, 0x00, 0x3c, 0x00, 0x4b, 0x00, 0x5a, 0x00, 0x64, 0x00,
          0x6e, 0x00, 0x73, 0x00, 0x7d, 0x00, 0x87, 0x00, 0x91, 0x00, 0x96, 0x00, 0xf0, 0x53, 0xfd, 0x4d, 0x03, 0xb0,
          0x8d, 0xfe, 0x00, 0x00, 0xf0, 0x53, 0xfd, 0x4d, 0x03, 0xb0, 0x7b, 0xfe, 0x00, 0x00, 0xf0, 0xfb, 0x63, 0x39,
          0x3c, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0xf0, 0xfb, 0x61, 0x39, 0x3c, 0x70, 0x94, 0xfd, 0x4b, 0x03, 0x7c, 0x44,
          0x27, 0xfe, 0x00, 0xd3, 0xfb, 0xae, 0x30, 0x29, 0x33, 0x3c, 0xfb, 0x30, 0x20, 0x07, 0x3c, 0x39, 0x24, 0xfe,
          0xf1, 0xfb, 0x53, 0x03, 0xae, 0x9c, 0xe6, 0x8e, 0xfe, 0x00, 0xc1, 0x61, 0x39, 0x3c, 0x44, 0xcc, 0xfd, 0x4b,
          0xfe, 0x00, 0xff, 0xfb, 0x61, 0x3e, 0xfe, 0x41, 0xcb, 0x39, 0x3c, 0x44, 0xcc, 0xfd, 0x4b, 0xfe, 0x00, 0x37,
          0x39, 0x5a, 0xae, 0xfd, 0x1f, 0x4b, 0x8e, 0x81, 0xfe, 0x3f, 0x39, 0x5a, 0x1c, 0x81, 0xc0, 0xff, 0x00, 0x00,
          0x00, 0x30, 0xb1, 0xfe, 0x00, 0x00, 0x03, 0xb1, 0xb2, 0xb3, 0xff, 0x05
        ]
      end
    end
  end

  describe "#phrase" do
    subject(:phrase_value) { phrase_instance.phrase }

    it { should eq([0xb1]) }

    context "when phrase is [0xb1, 0xb2, 0xb3]" do
      let(:phrase) { [0xb1, 0xb2, 0xb3] }

      it { should eq([0xb1, 0xb2, 0xb3]) }
    end
  end
end
